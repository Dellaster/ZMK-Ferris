/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    tapping-term-ms = <175>;
    quick_tap_ms = <150>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick_tap_ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        lh: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <175>;
            quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9>;
        };

        rh: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <175>;
            quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        fun_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp P  &kp L               &kp D        &kp G       &kp V           &kp COMMA     &kp F        &kp O        &kp SQT              &kp Y
&kp N  &lh LEFT_CONTROL R  &lh LMETA T  &lh LALT S  &kp B           &kp PERIOD    &rh LALT U   &rh RMETA A  &rh RIGHT_CONTROL E  &kp I
&kp Z  &kp X               &kp M        &kp C       &kp W           &kp K         &kp H        &kp Q        &kp MINUS            &kp J
                                        &lt 1 BSPC  &lt 4 ESCAPE    &lt 4 RETURN  &lt 2 SPACE
            >;
        };

        nav_layer {
            bindings = <
&none  &none           &none            &none     &none              &kp PSCRN  &none          &kp PG_UP       &kp INS       &none
&none  &lh LCTRL SLCK  &lh LMETA PG_DN  &kp LALT  &kp END            &kp HOME   &lh LALT LEFT  &lh RMETA DOWN  &lh RCTRL UP  &kp RIGHT_ARROW
&none  &kp DEL         &kp CLCK         &none     &kp PAUSE_BREAK    &none      &kp LNLCK      &kp K_CMENU     &none         &none
                                        &none     &kp LEFT_SHIFT     &kp RSHFT  &none
            >;
        };

        sym_layer {
            bindings = <
&kp LBRC   &kp RBRC         &kp LPAR         &kp RPAR       &none         &none            &kp N7       &kp N8        &kp N9        &kp RA(W)
&kp GRAVE  &lh LCTRL MINUS  &lh LMETA EQUAL  &lh LALT APOS  &kp BSLH      &kp FSLH         &rh LALT N4  &rh RMETA N5  &rh RCTRL N6  &kp RA(L)
&kp LT     &kp GT           &kp LBKT         &kp RBKT       &none         &kp KP_NUMBER_0  &kp N1       &kp N2        &kp N3        &kp RA(Z)
                                             &none          &kp LSHIFT    &kp RSHFT        &none
            >;
        };

        fun_layer {
            bindings = <
&kp K_PLAY_PAUSE  &kp K_MUTE        &kp C_VOLUME_UP          &sys_reset      &kp C_BRI_UP    &bt BT_SEL 2  &kp F7  &kp F8  &kp F9  &kp F12
&lh LCTRL K_PREV  &lh LSHFT K_NEXT  &lh LMETA K_VOLUME_DOWN  &lh LALT SPACE  &kp C_BRI_DN    &bt BT_SEL 1  &kp F4  &kp F5  &kp F6  &kp F11
&bt BT_PRV        &bt BT_CLR        &out OUT_TOG             &bt BT_NXT      &bootloader     &bt BT_SEL 0  &kp F1  &kp F2  &kp F3  &kp F10
                                                             &none           &kp LSHIFT      &kp RSHFT     &none
            >;
        };

        SHIFT {
            bindings = <
&kp LS(P)  &kp LS(L)  &kp LS(D)  &kp LS(G)  &kp LS(V)    &kp QUESTION  &kp LS(F)  &kp LS(O)  &kp DOUBLE_QUOTES  &kp LS(Y)
&kp LS(N)  &kp LS(R)  &kp LS(T)  &kp LS(S)  &kp LS(B)    &kp EXCL      &kp LS(U)  &kp LS(A)  &kp LS(E)          &kp LS(I)
&kp LS(Z)  &kp LS(X)  &kp LS(M)  &kp LS(C)  &kp LS(W)    &kp LS(K)     &kp LS(H)  &kp LS(Q)  &kp ASTRK          &kp LS(J)
                                 &trans     &trans       &trans        &trans
            >;
        };
    };
};
