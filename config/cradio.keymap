/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    tapping-term-ms = <175>;
    quick_tap_ms = <150>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick_tap_ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        lh: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <175>;
            quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9>;
        };

        rh: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <175>;
            quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        fun_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp SQT      &mt QMARK COMMA  &mt EXCL DOT  &kp P       &kp Y         &kp F       &kp G        &kp C        &kp R        &kp L
&lh LCTRL A  &lh LSHFT O      &lh LMETA E   &lh LALT U  &lh RALT I    &rh RALT D  &rh LALT H   &rh RMETA T  &rh RSHFT N  &rh RCTRL S
&kp MINUS    &kp Q            &kp J         &kp K       &kp X         &kp B       &kp M        &kp W        &kp V        &kp Z
                                            &lt 1 BSPC  &kp ESC       &kp ENTER   &lt 2 SPACE
            >;
        };

        nav_layer {
            bindings = <
&none      &none           &none            &none     &none              &kp PSCRN      &none          &kp PG_UP       &kp INS       &none
&kp LCTRL  &lh LSHFT SLCK  &lh LMETA PG_DN  &kp LALT  &lh RALT END       &lh RALT HOME  &lh LALT LEFT  &lh RMETA DOWN  &lh RSHFT UP  &lh RCTRL RIGHT
&none      &kp DEL         &kp CLCK         &none     &kp PAUSE_BREAK    &none          &kp LNLCK      &kp K_CMENU     &none         &none
                                            &none     &kp TAB          &none          &none
            >;
        };

        sym_layer {
            bindings = <
&kp LBRC         &kp RBRC         &kp LPAR         &kp RPAR       &none            &none     &kp N7       &kp N8        &kp N9        &kp RA(W)
&lh LCTRL GRAVE  &lh LSHFT MINUS  &lh LMETA EQUAL  &lh LALT APOS  &lh RALT BSLH    &none     &rh LALT N4  &rh RMETA N5  &rh RSHFT N6  &kp RA(L)
&kp LT           &kp GT           &kp LBKT         &kp RBKT       &none            &none     &kp N1       &kp N2        &kp N3        &kp RA(Z)
                                                   &none          &none            &none     &none
            >;
        };

        fun_layer {
            bindings = <
&kp K_PLAY_PAUSE  &kp K_MUTE          &none               &sys_reset       &kp C_BRI_UP    &bt BT_SEL 2  &kp F7  &kp F8  &kp F9  &kp F12
&lh LCTRL K_PREV  &lh LSHFT K_VOL_DN  &lh LMETA K_VOL_UP  &lh LALT K_NEXT  &kp C_BRI_DN    &bt BT_SEL 1  &kp F4  &kp F5  &kp F6  &kp F11
&bt BT_PRV        &bt BT_CLR          &out OUT_TOG        &bt BT_NXT       &bootloader     &bt BT_SEL 0  &kp F1  &kp F2  &kp F3  &kp F10
                                                          &none            &none           &none         &none
            >;
        };

        // fun_layer_right {
        //     bindings = <
// &none  &none  &none  &none  &none    &none        &sys_reset  &none         &none       &none
// &none  &none  &none  &none  &none    &none        &none       &none         &none       &none
// &none  &none  &none  &none  &none    &bootloader  &bt BT_NXT  &out OUT_TOG  &bt BT_CLR  &bt BT_PRV
//                      &none  &none    &none        &none
//             >;
//         };
    };
};
